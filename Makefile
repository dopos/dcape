# dcape Makefile
# used to control dcape stack

SHELL             = /bin/bash
CFG               = .dcape.env

#- ******************************************************************************
#- DCAPE: general config

#- dcape containers hostname domain
DCAPE_DOMAIN     ?= dev.lan

#- dcape root directory
DCAPE_ROOT       ?= $(PWD)

#- container name prefix
DCAPE_TAG        ?= dcape

#- CICD_ADMIN - CICD admin user
#- GITEA_ADMIN_NAME - Gitea admin user name
DCAPE_ADMIN_USER ?= dcapeadmin

#- VCS OAuth app owner group
#- NARRA_GITEA_ORG - user group with access to auth protected resources
#- config oauth app owner
#- CICD oauth app owner
DCAPE_ADMIN_ORG  ?= dcape

#- dcape apps
#- calculated by install
#- used in make only
APPS     ?=

# internal makefile var
DCAPE_STACK = yes

#- ------------------------------------------------------------------------------
#- DCAPE: internal config

#- dcape services frontend hostname
DCAPE_HOST       ?= $(DCAPE_DOMAIN)
#- docker network name
DCAPE_NET        ?= $(DCAPE_TAG)
#- docker internal network name
DCAPE_NET_INTRA  ?= $(DCAPE_TAG)_intra
#- create db cluster with this timezone
#- (also used by containers)
TZ               ?= $(shell cat /etc/timezone)
#- docker network subnet
DCAPE_SUBNET     ?= 100.127.0.0/24
#- docker intra network subnet
DCAPE_SUBNET_INTRA ?= 100.127.255.0/24
#- Deployment persistent storage, relative
DCAPE_VAR        ?= $(DCAPE_ROOT)/var

#- Powerdns API key for DNS-01 ACME challenges
#- set in pdns, used in traefik
DCAPE_PDNS_API_KEY     ?= $(shell openssl rand -hex 16; echo)

#- (auto) http(s)
DCAPE_SCHEME     ?=
#- gitea url
AUTH_URL         ?=
#- db container
DB_CONTAINER     ?= $(DCAPE_TAG)-db-1

ENFIST_URL       ?= http://enfist:8080/rpc

DCAPE_CORE        = yes
#- ------------------------------------------------------------------------------

-include $(CFG).bak
-include $(CFG)
export

all: help

ifneq ($(findstring $(MAKECMDGOALS),install oauth-again),)
  include Makefile.install
endif

APPS_DIRS  = $(addprefix apps/_,$(APPS))

# make a list $APP -> -f apps/$APP/docker-compose.inc.yml
DC_SOURCES = $(addsuffix /docker-compose.inc.yml,$(APPS_DIRS))
DC_SRC_ARG = $(addprefix -f ,$(DC_SOURCES))

# make a list $APP -> --env-file apps/$APP/.env
DC_ENV_SOURCES = .dcape.env $(addsuffix /.env,$(APPS_DIRS))
DC_ENV_ARG = $(addprefix --env-file ,$(DC_ENV_SOURCES))
DC_INC = docker-compose.inc.yml


include Makefile.dcape

# create docker-compose image
build-compose:
	docker build -t $(DCAPE_TAG)-compose --build-arg DCAPE_HOST_ROOT=$(PWD) .

# build .env file from app templates
.env: $(DC_ENV_SOURCES)
	@echo "*** $@ ***"
	@echo "# WARNING! This file was generated by make. DO NOT EDIT" > $@
	@echo "# file generated from: $(DC_ENV_SOURCES)" >> $@
	@for f in $^ ; do cat $$f >> $@ ; done

# build docker-compose.yml file from app templates
docker-compose.yml: $(DC_INC) $(DC_SOURCES)
	@echo "*** $@ ***"
	@echo "# WARNING! This file was generated by make. DO NOT EDIT" > $@
	@for f in $^ ; do cat $$f >> $@ ; done

dc: $(ENV) docker-compose.yml
	@>&2 echo "Running dc command: $(CMD)"
	@>&2 echo "Dcape URL: $(DCAPE_SCHEME)://$(DCAPE_HOST)"
	@>&2 echo "------------------------------------------"
	@docker compose -p $$DCAPE_TAG --project-directory $(DCAPE_ROOT) $(CMD)

ps: CMD=ps
ps: dc

## (re)start container(s)
up: CMD=up -d $(APPS)
up: dc

## start container
up-%:
	@echo "*** $@ ***" ; \
	x=$@ ; \
	$(MAKE) -s up APPS=$${x#up-}

## restart container
reup-%:
	@echo "*** $@ ***" ; \
	x=$@ ; \
	$(MAKE) -s reup APPS=$${x#reup-}

## restart container(s)
reup: CMD=up --force-recreate -d $(APPS)
reup: dc

## run git on every app
## sample: make git-status-s
git-%:
	@echo "*** $@ ***" ; \
	x=$@ ; cmdd=$${x#git-} ; cmd=$${cmdd/-/ -} ; \
	for app in $(APPS); do \
	  echo "Run '$$cmd' in $$app..."; \
	  pushd apps/_$$app > /dev/null ; \
	    git $$cmd ; \
	  popd > /dev/null ; \
	done
