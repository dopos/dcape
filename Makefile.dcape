# dcape application Makefile
# included by dcape app inside dcapr

SHELL       = /bin/bash

DCAPE_ROOT ?= $(shell dirname $(abspath $(lastword $(MAKEFILE_LIST))))
-include $(DCAPE_ROOT)/.dcape.env
include $(DCAPE_ROOT)/Makefile.common

# ------------------------------------------------------------------------------

## create database and user
db-create: docker-wait
	@echo "*** $@ ***" \
	&& varname=$${NAME:?Must be set}_DB_PASS && pass=$${!varname} \
	&& varname=$(NAME)_DB_TAG && dbname=$${!varname} \
	&& echo "Create db $$dbname..." ; \
	$(MAKE) -s .lib-db-create PGUSER=$$dbname PGDATABASE=$$dbname PGPASSWORD=$$pass

## drop database and user
db-drop:
	@echo "*** $@ ***" \
	&& varname=$${NAME:?Must be set}_DB_TAG && dbname=$${!varname}  \
	&& echo "Drop db ($$NAME) $$dbname..." ; \
	$(MAKE) -s .lib-db-drop PGUSER=$$dbname PGDATABASE=$$dbname

## exec psql inside db container from apps.
## Example: make psql-docker DCAPE_STACK=yes
psql-docker:
	@varname=$${NAME}_DB_TAG && dbname=$${!varname} ; \
	[[ $$dbname ]] || dbname=postgres ; \
	echo "psql for $$dbname" ; \
	docker exec -it $${DB_CONTAINER:?Must be set} psql -d $$dbname -U $$dbname

## run local psql from apps.
## Example: make psql-local DCAPE_STACK=yes PGPORT=5433
psql-local:
	@varname=$${NAME:?Must be set}_DB_PASS && pass=$${!varname} \
	&& varname=$${NAME}_DB_TAG && dbname=$${!varname} ; \
	echo "*** $@:$$dbname ***" ; \
	$(MAKE) -s .lib-db-psql PGUSER=$$dbname PGDATABASE=$$dbname PGPASSWORD=$$pass

# called in app Makefile to run dcape stack commands
compose:
	@docker compose -p $(DCAPE_TAG) --project-directory $(DCAPE_ROOT) $(CMD)

DCAPE_VERSION_DOMAIN ?= dockerpoll.dcape.ru
DCAPE_VERSION_OPTS   ?= -t txt +short

## compare local and upstream app versions
ver-cmp:
	@printf "%-8s %-18s %-30s %-15s %-30s %-15s\n" "Role" "App" "Image" Version "Dcape image" "Dcape version" ; \
	printf "%-8s %-18s %-30s %-15s %-30s %-15s\n" "----" "---" "-----" "-------" "-----------" "-------------" ; \
	for app in $(APPS); do \
	  x=$$(grep -E '^[^#].+_IMAGE=' apps/_$$app/.env) ; img=$${x#*=} ; \
	  tag=$${img##*/} ; \
	  if [[ $$app == config ]] ; then img=ghcr.io/apisite/app-enfist ; tag=enfist ; \
	  elif [[ $$app == router ]] ; then img=traefik ; tag=$$img ; \
	  elif [[ $$tag == woodpecker-server ]] ; then tag=woodpecker ; \
	  elif [[ $$tag == powerdns-alpine ]] ; then tag=powerdns ; \
	  elif [[ $$tag == portainer-ce ]] ; then tag=portainer ; \
	  fi ; \
	  x=$$(grep -E '^[^#].+_VER=' apps/_$$app/.env) ; ver=$${x#*=} ; \
	  read i v < <(dig $(DCAPE_VERSION_OPTS) $${tag}.$(DCAPE_VERSION_DOMAIN) | tr -d \") ; \
	  [[ $$img == $$i ]] && i="="; \
	  [[ $$ver == $$v ]] && v="="; \
	  printf "%-8s %-18s %-30s %-15s %-30s %-15s\n" $$app $$tag $$img $$ver $$i $$v; \
	done

# may be used in app Makefile, called before app up
.setup-before-up:

# may be used in app Makefile, called after app up
.setup-after-up:
